"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const _=require("electron-store"),b=require("fs"),S=require("path"),l=require("electron"),y=require("http"),f=require("url"),w=require("metaweblog-api"),c=e=>e&&typeof e=="object"&&"default"in e?e:{default:e},m=c(_),n=c(b),i=c(S),F=c(y),x=c(w),M={name:"settings",cwd:"setting",defaults:{publish:{abstractMode:"article",mathjax:!0,abstractNum:120,highlight:!1},sites:[{name:"Sample Site Config",url:"https://www.example.com/xmlrpc.php",username:"username",password:"",selected:!0}],detail:{notCheck:!0,forcedUpdate:!1,getNetPic:!1},theme:!0,language:"zh",filelist:!0}},a=new m.default(M),p=new m.default({name:"use-record",defaults:{tabs:[{type:"welcome",modified:!1,filePath:""}],"tab-current":0}}),P={getLanguage(){return a.get("language","zh")},storeSettingsClear(){return a.clear()},storeSettingsSet(e,t){a.set(e,t)},storeSettingsGet(e,t){return a.get(e,t)},storeRecordSet(e,t){return p.set(e,t)},storeRecordGet(e,t){return p.get(e,t)},setShowFile(e){return a.set("filelist",e)},getShowFile(){const e=a.get("filelist");return typeof e=="boolean"?e:!0},getTheme(){return a.get("theme",!0)},setTheme(e){return a.set("theme",e)},openInEditor(){a.openInEditor()},getSettingsPath(){return a.path}},j={fsReadFile:n.default.readFile,fsReadFileSync(e){try{return n.default.readFileSync(e,{encoding:"base64"})}catch{return!1}},bufReadFileSync(e){try{const t=n.default.readFileSync(e,{encoding:"base64"});return Buffer.from(t,"base64")}catch{return!1}},fsWriteFile:n.default.writeFile,fsWriteFileSync:n.default.writeFileSync,fsExistsSync:n.default.existsSync,fsReaddirSync:n.default.readdirSync,fsStatSync:n.default.statSync,fsLstatSync:n.default.lstatSync,isFileOrDir(e,t){try{return n.default.lstatSync(i.default.join(e,t)).isDirectory()}catch{return!1}},isDir(e){try{return n.default.lstatSync(e).isDirectory()}catch{return!1}},fsLstat:n.default.lstat},R={pathBasename:i.default.basename,pathJoin:i.default.join,pathIsAbsolute:i.default.isAbsolute,pathDirname:i.default.dirname,pathExtname:i.default.extname,pathResolve:i.default.resolve};function v(e){if(e.trim().includes(" "))return!1;try{return new f.URL(e),!0}catch{return!1}}function E(e){return new Promise(t=>{v(e)||t(!1);const r={method:"HEAD",host:f.parse(e).host,path:f.parse(e).pathname,port:80};F.default.request(r,s=>{s.statusCode===void 0?t(!1):t(s.statusCode<400||s.statusCode>=500)}).end()})}const I={async checkUrlValid(e){return e=encodeURI(e),await E(e)},shell:l.shell,readFromClipboard(){return l.clipboard.readText()},versions:process.versions},d=["fromMain","exePath","version","menu.language","menu.welcome","menu.sample","addRecentDocument","menu.save","menu.settings","menu.open","menu.publish","menu.showfile","menu.closetab","menu.reloadfile","menu.theme","new-media-object","new-metaweblog","__static"],q={send:(e,t)=>{d.includes(e)&&l.ipcRenderer.send(e,t)},receive:(e,t)=>{if(d.includes(e)){const r=(o,...s)=>t(...s);return l.ipcRenderer.on(e,r),()=>{l.ipcRenderer.removeListener(e,r)}}},syncMsg:(e,t)=>{if(d.includes(e))return l.ipcRenderer.sendSync(e,t)}},A={jpg:"image/jpeg",jpeg:"image/jpeg",jpe:"image/jpeg",gif:"image/gif",png:"image/png",bmp:"image/bmp",tif:"image/tiff",tiff:"image/tiff",ico:"image/x-icon",webp:"image/webp"},D={initBlogApi(e){return new x.default(e)},newPost(e,t,r,o){return e.newPost("",t,r,o,!0)},editPost(e,t,r,o,s){return e.editPost(t,r,o,s,!0)},getPost(e,t,r,o){return e.getPost(t,r,o)},newMediaObject(e,t,r,o,s){const g=Buffer.from(n.default.readFileSync(s)),h={name:o,type:W(s),bits:g,overwrite:!0};return e.newMediaObject("",t,r,h)}};function W(e){let t=i.default.extname(e);t=t&&t.length>1&&t.substring(1)||"";const r=A[t];if(!r)throw new Error(`${t} \u6B64\u5A92\u4F53\u540E\u7F00\u4E0D\u652F\u6301`);return r}exports.blogApi=D;exports.ipc=q;exports.nodeFs=j;exports.nodePath=R;exports.other=I;exports.store=P;const{contextBridge:u}=require("electron");u.exposeInMainWorld("__electron_preload__blogApi",exports.blogApi);u.exposeInMainWorld("__electron_preload__ipc",exports.ipc);u.exposeInMainWorld("__electron_preload__nodeFs",exports.nodeFs);u.exposeInMainWorld("__electron_preload__nodePath",exports.nodePath);u.exposeInMainWorld("__electron_preload__other",exports.other);u.exposeInMainWorld("__electron_preload__store",exports.store);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
